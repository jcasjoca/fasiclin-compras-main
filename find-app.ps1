# FASICLIN COMPRAS - Detector Inteligente de Aplica√ß√£o
# Este script encontra automaticamente em qual porta a aplica√ß√£o est√° rodando

Write-Host "üîç FASICLIN COMPRAS - DETECTOR DE APLICA√á√ÉO" -ForegroundColor Magenta
Write-Host "============================================"

$ports = @(8080, 8081, 8082, 8083, 8084, 8085, 8086, 8087, 8088, 8089)
$foundPort = $null

Write-Host "üîé Procurando aplica√ß√£o nas portas dispon√≠veis..." -ForegroundColor Yellow

foreach($port in $ports) {
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:$port/api/pedidos-agrupados" -Method GET -TimeoutSec 2 -ErrorAction Stop
        $foundPort = $port
        break
    } catch {
        # Continuar procurando
    }
}

if ($foundPort) {
    Write-Host ""
    Write-Host "üéâ APLICA√á√ÉO ENCONTRADA E FUNCIONANDO!" -ForegroundColor Green
    Write-Host "========================================"
    Write-Host "üåê Porta: $foundPort" -ForegroundColor Cyan
    Write-Host "üìã Interface: http://localhost:$foundPort/consulta.html" -ForegroundColor Cyan
    Write-Host "üîß API Base: http://localhost:$foundPort/api/" -ForegroundColor Cyan
    Write-Host ""
    Write-Host "‚úÖ FUNCIONALIDADES DISPON√çVEIS:" -ForegroundColor Yellow
    Write-Host "   ‚Ä¢ PDF para pedidos aprovados e reprovados"
    Write-Host "   ‚Ä¢ Download ZIP para m√∫ltiplos PDFs"
    Write-Host "   ‚Ä¢ Data/hora de aprova√ß√£o imut√°vel"
    Write-Host "   ‚Ä¢ Sistema de agrupamento de pedidos"
    Write-Host ""
    
    # Teste completo
    try {
        $r1 = Invoke-WebRequest -Uri "http://localhost:$foundPort/api/pedidos-agrupados" -TimeoutSec 3
        $r2 = Invoke-WebRequest -Uri "http://localhost:$foundPort/consulta.html" -TimeoutSec 3
        $r3 = Invoke-WebRequest -Uri "http://localhost:$foundPort/api/orcamentos/pendentes" -TimeoutSec 3
        
        Write-Host "üß™ TESTE DE FUNCIONALIDADES:" -ForegroundColor Green
        Write-Host "   ‚úÖ API Pedidos: OK ($($r1.StatusCode))"
        Write-Host "   ‚úÖ Interface: OK ($($r2.StatusCode))"
        Write-Host "   ‚úÖ Or√ßamentos: OK ($($r3.StatusCode))"
        Write-Host ""
        Write-Host "üöÄ SISTEMA 100% OPERACIONAL!" -ForegroundColor Green
        
    } catch {
        Write-Host "‚ö†Ô∏è Aplica√ß√£o encontrada mas ainda inicializando..." -ForegroundColor Yellow
    }
    
} else {
    Write-Host ""
    Write-Host "‚ùå APLICA√á√ÉO N√ÉO ENCONTRADA" -ForegroundColor Red
    Write-Host "A aplica√ß√£o pode estar iniciando ou parada."
    Write-Host "Execute 'start-smart.bat' para iniciar."
}

Write-Host ""
Write-Host "Pressione qualquer tecla para continuar..."
$null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")